@page "/word-chart"

@using Color = System.Drawing.Color

<BarChart @ref="barChart" Class="mb-4" />

@code {
    [CascadingParameter]
    public AppState ApplicationState { get; set; }

    private List<string?> labelTopWords;
    private BarChart barChart;
    private BarChartOptions barChartOptions = default!;

    private IEnumerable<WordFrequency>? words = default!;
    private ChartData chartData;

    Random random = new Random();

    protected override void OnInitialized()
    {
        chartData = GetChartData();
        LoadBarChartDataset();
        LoadBarChartOptions();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await barChart.InitializeAsync(chartData, barChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private ChartData GetChartData()
    {
        int wordsToShow = 15;
        labelTopWords = ApplicationState.GroupedWords
                            .Take(wordsToShow)
                            .Select(word => word.Word)
                            .ToList();

        return new ChartData
            {
                Labels = labelTopWords,
                Datasets = new List<IChartDataset>()
            };
    }

    private void LoadBarChartOptions()
    {
        barChartOptions = new BarChartOptions();

        barChartOptions.Interaction.Mode = InteractionMode.Index;

        barChartOptions.Plugins.Title.Text = "WORD CHART";
        barChartOptions.Plugins.Title.Display = true;
        barChartOptions.Plugins.Title.Font = new ChartFont();
        barChartOptions.Plugins.Title.Font.Size = 20;

        barChartOptions.Responsive = true;

        barChartOptions.Scales.X.Title = new ChartAxesTitle();
        barChartOptions.Scales.X.Title.Text = "Words";
        barChartOptions.Scales.X.Title.Display = true;

        barChartOptions.Scales.Y.Title = new ChartAxesTitle();
        barChartOptions.Scales.Y.Title.Text = "Frequency";
        barChartOptions.Scales.Y.Title.Display = true;
    }

    private void LoadBarChartDataset()
    {
        var newsOutlets = ApplicationState.Words.DistinctBy(word => word.NewsOutlet);

        foreach(var newsOutelt in newsOutlets)
        {
            chartData.Datasets.Add(GetWordBarChartDataset(newsOutelt.NewsOutlet));
        }
    }

    private BarChartDataset GetWordBarChartDataset(string newsOutlet)
    {
        var randomColour = Color.FromArgb(random.Next(256), random.Next(256), random.Next(256));

        var data = labelTopWords
        .Select(labelWord =>
        {
            var filtered = ApplicationState.Words
                                .Where(word => word.Word == labelWord && word.NewsOutlet
                                .Equals(newsOutlet));

            double? value = filtered.FirstOrDefault()?.Frequency ?? 0;
            return value;
        })
        .ToList();

        return new BarChartDataset()
            {
                Label = newsOutlet,
                Data = data,
                BackgroundColor = new List<string> { randomColour.ToRgbString() },
                BorderColor = new List<string> { randomColour.ToRgbString() },
                BorderWidth = new List<double> { 0 },
            };
    }
}