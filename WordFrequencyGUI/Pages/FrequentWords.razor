@page "/frequentwords"
@inject HttpClient Http

<PageTitle>Word Frequency</PageTitle>

<h1>Word Frequency</h1>

<p>Display most frequent words from news outlet titles.</p>

<Grid @ref="grid"
      TItem="WordFrequency"
      Class="table table-hover table-bordered table-striped"
      DataProvider="EmployeesDataProvider"
      AllowFiltering="true"
      AllowSorting="true"
      Responsive="true"
      AllowPaging="true"
      PageSize="10"
      PageSizeSelectorItems="new int[3] { 10, 20, 50 }"
      PaginationItemsTextFormat="">
    <GridColumn TItem="WordFrequency" HeaderText="Word" PropertyName="Word" SortKeySelector="item => item.Word">
        @context.Word
    </GridColumn>
    <GridColumn TItem="WordFrequency" HeaderText="Frequency" PropertyName="Frequency" SortKeySelector="item => item.Frequency">
        @context.Frequency
    </GridColumn>
</Grid>

@code {
    [Inject] protected PreloadService PreloadService { get; set; }

    BlazorBootstrap.Grid<WordFrequency> grid = default!;
    private IEnumerable<WordFrequency>? words = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task<GridDataProviderResult<WordFrequency>> EmployeesDataProvider(GridDataProviderRequest<WordFrequency> request)
    {
        if (words is null) // pull words only one time for client-side filtering, sorting, and paging
        {
            try
            {
                PreloadService.Show();
                words = await Http.GetFromJsonAsync<WordFrequency[]>("api/WordFrequency");
            }
            catch (Exception e)
            {
                throw new Exception($"Failed to fetch words", e);
            }
            finally
            {
                PreloadService.Hide();
            }

        }

        List<WordFrequency> grouped = GroupWords(words);
        return await Task.FromResult(request.ApplyTo(grouped ?? new List<WordFrequency>()));
    }

    public class WordFrequency
    {
        public string? Word { get; set; }
        public int Frequency { get; set; }
        public string? NewsOutlet { get; set; }
    }


    public static List<WordFrequency> GroupWords(IEnumerable<WordFrequency>? words)
    {
        var grouped = words.GroupBy(word => word.Word)
                   .Select(group => new WordFrequency { Word = group.Key, Frequency = group.Sum(word => word.Frequency) })
                   .OrderByDescending(word => word.Frequency)
                   .ToList();

        return grouped;
    }
}