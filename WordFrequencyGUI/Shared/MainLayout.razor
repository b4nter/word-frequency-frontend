@inherits LayoutComponentBase
@inject HttpClient Http

<div class="bb-page">

    <Sidebar @ref="sidebar"
             Title="Words In News Outlets"
             DataProvider="SidebarDataProvider" />

    <main>
        <article class="content px-4">
            <div class="py-2">
                @if (IsDataLoaded)
                {
                    <CascadingValue Value="@ApplicationState">
                        @Body
                    </CascadingValue>
                }
                else
                {
                    <p>Loading...</p>
                }
            </div>

        </article>
    </main>

</div>

@code {
    private Sidebar sidebar = default!;
    private IEnumerable<NavItem> navItems = default!;

    private Boolean IsDataLoaded { get; set; } = false;

    public AppState ApplicationState { get; set; } = new AppState();
    private async Task<SidebarDataProviderResult> SidebarDataProvider(SidebarDataProviderRequest request)
    {
        if (navItems is null)
            navItems = GetNavItems();

        return await Task.FromResult(request.ApplyTo(navItems));
    }

    private IEnumerable<NavItem> GetNavItems()
    {
        navItems = new List<NavItem>
        {
            new NavItem { Id = "1", Href = "", IconName = IconName.Table, Text = "Home", Match=NavLinkMatch.All},
            new NavItem { Id = "2", Href = "word-chart", IconName = IconName.BarChartLine, Text = "Word Chart"},
        };

        return navItems;
    }

    protected override async Task OnInitializedAsync()
    {
        var words = await Http.GetFromJsonAsync<WordFrequency[]>("api/WordFrequency/GetCountedWords");
        ApplicationState.GroupedWords = GroupWords(words);
        ApplicationState.Words = words.ToList();
        IsDataLoaded = true;
    }

    private static List<WordFrequency> GroupWords(IEnumerable<WordFrequency>? words)
    {
        var grouped = words.GroupBy(word => word.Word)
                   .Select(group => new WordFrequency { Word = group.Key, Frequency = group.Sum(word => word.Frequency) })
                   .OrderByDescending(word => word.Frequency)
                   .ToList();

        return grouped;
    }
}